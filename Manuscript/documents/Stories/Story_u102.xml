<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<idPkg:Story xmlns:idPkg="http://ns.adobe.com/AdobeInDesign/idml/1.0/packaging" DOMVersion="14.0">
	<Story Self="u102" UserText="true" IsEndnoteStory="false" AppliedTOCStyle="n" TrackChanges="false" StoryTitle="$ID/" AppliedNamedGrid="n">
		<StoryPreference OpticalMarginAlignment="false" OpticalMarginSize="12" FrameType="TextFrameType" StoryOrientation="Horizontal" StoryDirection="LeftToRightDirection" />
		<InCopyExportOption IncludeGraphicProxies="true" IncludeAllResources="false" />
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle" Justification="CenterAlign">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]" FillColor="Color/u121" PointSize="36">
				<Content>INTRODUCTION</Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle" Justification="CenterAlign">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Properties>
					<AppliedFont type="string">Kefa</AppliedFont>
				</Properties>
				<Content>Flutter widgets are built using a modern react-style framework, which takes inspiration from React. The central idea is that you build your UI out of widgets. </Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]" Underline="true">
				<Properties>
					<AppliedFont type="string">Kefa</AppliedFont>
				</Properties>
				<Content>Widgets describe what their view should look like given their current configuration and state. </Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Properties>
					<AppliedFont type="string">Kefa</AppliedFont>
				</Properties>
				<Content>When a widget’s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next</Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Content>.</Content>
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle" LeftIndent="18" FirstLineIndent="-18" BulletsAndNumberingListType="NumberedList" NumberingContinue="false">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Content>Note: If you would like to become better acquainted with Flutter by diving into some code, check out Building Layouts in Flutter and Adding Interactivity to Your Flutter App.</Content>
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle" LeftIndent="18" FirstLineIndent="-18" BulletsAndNumberingListType="NumberedList">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Content>Hello world </Content>
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
				<Content>Hello World</Content>
				<Br />
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]" StrikeThru="true">
				<Content>The minimal Flutter app simply calls the runApp() function with a widget:</Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
				<Br />
				<Content>content_copy</Content>
				<Br />
				<Content>import ‘package:flutter/material.dart’;</Content>
				<Br />
				<Br />
				<Rectangle Self="u139" ContentType="GraphicType" StoryTitle="$ID/" OverriddenPageItemProps="" Visible="true" Name="$ID/" HorizontalLayoutConstraints="FlexibleDimension FixedDimension FlexibleDimension" VerticalLayoutConstraints="FlexibleDimension FixedDimension FlexibleDimension" GradientFillStart="0 0" GradientFillLength="0" GradientFillAngle="0" GradientStrokeStart="0 0" GradientStrokeLength="0" GradientStrokeAngle="0" Locked="false" LocalDisplaySetting="Default" GradientFillHiliteLength="0" GradientFillHiliteAngle="0" GradientStrokeHiliteLength="0" GradientStrokeHiliteAngle="0" AppliedObjectStyle="ObjectStyle/$ID/[None]" ItemTransform="1 0 0 1 228.6351928710937 -121.65907780242492" ParentInterfaceChangeCount="138508 1127111361 11268 555419132" TargetInterfaceChangeCount="" LastUpdatedInterfaceChangeCount="">
					<Properties>
						<PathGeometry>
							<GeometryPathType PathOpen="false">
								<PathPointArray>
									<PathPointType Anchor="-228.6351928710937 -80.83070866180014" LeftDirection="-228.6351928710937 -80.83070866180014" RightDirection="-228.6351928710937 -80.83070866180014" />
									<PathPointType Anchor="-228.6351928710937 121.65907780242492" LeftDirection="-228.6351928710937 121.65907780242492" RightDirection="-228.6351928710937 121.65907780242492" />
									<PathPointType Anchor="198.26244492410646 121.65907780242492" LeftDirection="198.26244492410646 121.65907780242492" RightDirection="198.26244492410646 121.65907780242492" />
									<PathPointType Anchor="198.26244492410646 -80.83070866180014" LeftDirection="198.26244492410646 -80.83070866180014" RightDirection="198.26244492410646 -80.83070866180014" />
								</PathPointArray>
							</GeometryPathType>
						</PathGeometry>
					</Properties>
					<FrameFittingOption TopCrop="5.322624655330742" BottomCrop="-1.6211208911764743" />
					<ObjectExportOption AltTextSourceType="SourceXMLStructure" ActualTextSourceType="SourceXMLStructure" CustomAltText="$ID/" CustomActualText="$ID/" ApplyTagType="TagFromStructure" ImageConversionType="JPEG" ImageExportResolution="Ppi300" GIFOptionsPalette="AdaptivePalette" GIFOptionsInterlaced="true" JPEGOptionsQuality="High" JPEGOptionsFormat="BaselineEncoding" ImageAlignment="AlignLeft" ImageSpaceBefore="0" ImageSpaceAfter="0" UseImagePageBreak="false" ImagePageBreak="PageBreakBefore" CustomImageAlignment="false" SpaceUnit="CssPixel" CustomLayout="false" CustomLayoutType="AlignmentAndSpacing" EpubType="$ID/" SizeType="DefaultSize" CustomSize="$ID/" PreserveAppearanceFromLayout="PreserveAppearanceDefault">
						<Properties>
							<AltMetadataProperty NamespacePrefix="$ID/" PropertyPath="$ID/" />
							<ActualMetadataProperty NamespacePrefix="$ID/" PropertyPath="$ID/" />
						</Properties>
					</ObjectExportOption>
					<AnchoredObjectSetting AnchorYoffset="-41.06188322368388" />
					<TextWrapPreference Inverse="false" ApplyToMasterPageOnly="false" TextWrapSide="BothSides" TextWrapMode="None">
						<Properties>
							<TextWrapOffset Top="0" Left="0" Bottom="0" Right="0" />
						</Properties>
						<ContourOption ContourType="SameAsClipping" IncludeInsideEdges="false" ContourPathName="$ID/" />
					</TextWrapPreference>
					<InCopyExportOption IncludeGraphicProxies="true" IncludeAllResources="false" />
					<Image Self="u135" Space="$ID/#Links_RGB" ActualPpi="72 72" EffectivePpi="56 176" ImageRenderingIntent="UseColorSettings" OverriddenPageItemProps="" LocalDisplaySetting="Default" ImageTypeName="$ID/Portable Network Graphics (PNG)" AppliedObjectStyle="ObjectStyle/$ID/[None]" ItemTransform="1.29362920544 0 0 0.408 -228.63519287109375 -83.00233952117509" Visible="true" Name="$ID/" HorizontalLayoutConstraints="FlexibleDimension FixedDimension FlexibleDimension" VerticalLayoutConstraints="FlexibleDimension FixedDimension FlexibleDimension" GradientFillStart="0 0" GradientFillLength="0" GradientFillAngle="0" GradientFillHiliteLength="0" GradientFillHiliteAngle="0" ParentInterfaceChangeCount="138508 1127111361 138558 555419132" TargetInterfaceChangeCount="" LastUpdatedInterfaceChangeCount="">
						<Properties>
							<Profile type="string">$ID/None</Profile>
							<GraphicBounds Left="0" Top="0" Right="330" Bottom="500" />
						</Properties>
						<ClippingPathSettings ClippingType="None" InvertPath="false" IncludeInsideEdges="false" RestrictToFrame="false" UseHighResolutionImage="true" Threshold="25" Tolerance="2" InsetFrame="0" AppliedPathName="$ID/" Index="-1" />
						<ImageIOPreference ApplyPhotoshopClippingPath="true" AllowAutoEmbedding="true" AlphaChannelName="$ID/kNoneName" />
						<TextWrapPreference Inverse="false" ApplyToMasterPageOnly="false" TextWrapSide="BothSides" TextWrapMode="BoundingBoxTextWrap">
							<Properties>
								<TextWrapOffset Top="0" Left="0" Bottom="0" Right="0" />
							</Properties>
							<ContourOption ContourType="SameAsClipping" IncludeInsideEdges="false" ContourPathName="$ID/" />
						</TextWrapPreference>
						<Link Self="u138" AssetURL="$ID/" AssetID="$ID/" LinkResourceURI="file:/Users/Brain/Downloads/Book%20Cover%207.png" LinkResourceFormat="$ID/Portable Network Graphics (PNG)" StoredState="Normal" LinkClassID="35906" LinkClientID="257" LinkResourceModified="false" LinkObjectModified="false" ShowInUI="true" CanEmbed="true" CanUnembed="true" CanPackage="true" ImportPolicy="NoAutoImport" ExportPolicy="NoAutoExport" LinkImportStamp="file 131904511583922880 120638" LinkImportModificationTime="2018-12-28T11:42:38" LinkImportTime="2019-02-05T11:47:11" LinkResourceSize="0~1d73e" RenditionData="Actual" />
					</Image>
				</Rectangle>
				<Br />
				<Content>  runApp(</Content>
				<Br />
				<Content>    Center(</Content>
				<Br />
				<Content>      child: Text(</Content>
				<Br />
				<Content>        ‘Hello, world!’,</Content>
				<Br />
				<Content>        textDirection: TextDirection.ltr,</Content>
				<Br />
				<Content>      ),</Content>
				<Br />
				<Content>    ),</Content>
				<Br />
				<Content>  );</Content>
				<Br />
				<Content>}</Content>
				<Br />
				<Content>The runApp() function takes the given Widget and makes it the root of the widget tree. In this example, the widget tree consists of two widgets, the Center widget and its child, the Text widget. The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.</Content>
				<Br />
				<Br />
				<Content>When writing an app, you’ll commonly author new widgets that are subclasses of either StatelessWidget or StatefulWidget, depending on whether your widget manages any state. A widget’s main job is to implement a build function, which describes the widget in terms of other, lower-level widgets. The framework builds those widgets in turn until the process bottoms out in widgets that represent the underlying RenderObject, which computes and describes the geometry of the widget.</Content>
				<Br />
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle" LeftIndent="18" FirstLineIndent="-18" BulletsAndNumberingListType="BulletList">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Content>Flutter widgets are built using a modern react-style framework, which takes inspiration </Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Properties>
					<Leading type="unit">30</Leading>
				</Properties>
				<Content>from React. The central idea is that you build your UI out of widgets. Widgets describe what their view should look like given their current configuration and state. When a widget’s state changes, the widget rebuilds its description, which the framework diffs against the previous description in order to determine the minimal changes needed in the underlying render tree to transition from one state to the next.</Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
		<ParagraphStyleRange AppliedParagraphStyle="ParagraphStyle/$ID/NormalParagraphStyle">
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
				<Content>Note: If you would like to become better acquainted with Flutter by diving into some code, check out Building Layouts in Flutter and Adding Interactivity to Your Flutter App.</Content>
				<Br />
				<Br />
				<Content>Hello World</Content>
				<Br />
				<Content>The minimal Flutter app simply calls the runApp() function with a widget:</Content>
				<Br />
				<Br />
				<Content>content_copy</Content>
				<Br />
				<Content>import ‘package:flutter/material.dart’;</Content>
				<Br />
				<Br />
				<Content>void main() {</Content>
				<Br />
				<Content>  runApp(</Content>
				<Br />
				<Content>    Center(</Content>
				<Br />
				<Content>      child: Text(</Content>
				<Br />
				<Content>        ‘Hello, world!’,</Content>
				<Br />
				<Content>        textDirection: TextDirection.ltr,</Content>
				<Br />
				<Content>      ),</Content>
				<Br />
				<Content>    ),</Content>
				<Br />
				<Content>  );</Content>
				<Br />
				<Content>}</Content>
				<Br />
				<Br />
				<Br />
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]" FillColor="Color/C=100 M=0 Y=0 K=0" PointSize="24" StrokeColor="Color/u127">
				<Content>Description:</Content>
			</CharacterStyleRange>
			<CharacterStyleRange AppliedCharacterStyle="CharacterStyle/$ID/[No character style]">
				<Br />
				<Br />
				<Content>The runApp() function takes the given Widget and makes it the root of the widget tree. In this example, the widget tree consists of two widgets, the Center widget and its child, the Text widget. The framework forces the root widget to cover the screen, which means the text “Hello, world” ends up centered on screen. The text direction needs to be specified in this instance; when the MaterialApp widget is used, this is taken care of for you, as demonstrated later.</Content>
				<Br />
				<Br />
				<Content>When writing an app, you’ll commonly author new widgets that are subclasses of either StatelessWidget or StatefulWidget, depending on whether your widget manages any state. A widget’s main job is to implement a build function, which describes the widget in terms of other, lower-level widgets. The framework builds those widgets in turn until the process bottoms out in widgets that represent the underlying RenderObject, which computes and describes the geometry of the widget.</Content>
				<Br />
				<Br />
			</CharacterStyleRange>
		</ParagraphStyleRange>
	</Story>
</idPkg:Story>
